import math
import random
from typing import List, Tuple, Optional

def is_prime(n: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º"""
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def build_small_factor_base() -> List[int]:
    """
    –°—Ç—Ä–æ–∏—Ç –º–∞–ª–µ–Ω—å–∫—É—é —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∏–∑ 3 –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
    """
    return [2, 3, 5]

def factor_smooth_number_strict(b: int, factor_base: List[int]) -> Optional[Tuple[List[int], List[int]]]:
    """
    –°–¢–†–û–ì–ê–Ø —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–∞ b –ø–æ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ b –¥–µ–ª–∏—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —á–∏—Å–ª–∞ –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    –ß–∏—Å–ª–∞ 1 –∏ -1 –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç!
    """
    if b == 0:
        return None, [0]
    
    # –ß–∏—Å–ª–∞ 1 –∏ -1 –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç - –æ–Ω–∏ –Ω–µ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã
    if abs(b) == 1:
        return None, ["¬±1"]  # 1 –∏ -1 –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã
    
    factors = [0] * len(factor_base)
    temp = abs(b)
    
    # –°–Ω–∞—á–∞–ª–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
    for i, p in enumerate(factor_base):
        count = 0
        while temp % p == 0:
            count += 1
            temp //= p
        factors[i] = count
    
    # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–µ —Ä–∞–≤–Ω—ã–π 1, —Ç–æ —á–∏—Å–ª–æ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç
    if temp != 1:
        # –ù–∞–π–¥–µ–º, –∫–∞–∫–∏–µ –µ—â–µ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –µ—Å—Ç—å
        extra_factors = []
        temp_check = temp
        d = 2
        while temp_check > 1:
            if temp_check % d == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–æ—Å—Ç—ã–º –∏ –Ω–µ –≤—Ö–æ–¥–∏—Ç –ª–∏ –≤ —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
                if is_prime(d) and d not in factor_base:
                    extra_factors.append(d)
                temp_check //= d
            else:
                d += 1
        
        return None, extra_factors  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ —Å–ø–∏—Å–æ–∫ –ª–∏—à–Ω–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
    
    return factors, []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ª–∏—à–Ω–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π

def print_factorization(b: int, factors: List[int], factor_base: List[int]) -> str:
    """–í—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏"""
    terms = []
    for i, (exp, p) in enumerate(zip(factors, factor_base)):
        if exp > 0:
            terms.append(f"{p}^{exp}")
    return " √ó ".join(terms) if terms else "1"

def generate_smooth_pairs_dixon_strict(n: int, factor_base: List[int], t: int) -> Tuple[List[List[int]], List[int], List[int]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç t –ø–∞—Ä —á–∏—Å–µ–ª (a_i, b_i) —Å –°–¢–†–û–ì–û–ô –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–ª–∞–¥–∫–æ—Å—Ç–∏
    """
    matrix = []
    a_values = []
    b_values = []
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å a = ‚åä‚àön‚åã + 1
    start_a = math.isqrt(n) + 1
    current_a = start_a
    
    print(f"\n--- –®–ê–ì 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ {t} –ø–∞—Ä (a_i, b_i) ---")
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ a = ‚åä‚àö{n}‚åã + 1 = {start_a}")
    print(f"–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: {factor_base}")
    print("–°–¢–†–û–ì–ò–ï –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    print("–∞) a_i = ‚åä‚àön‚åã + 1, ‚åä‚àön‚åã + 2, ... (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)")
    print("–±) b_i = a_i¬≤ mod n") 
    print("–≤) b_i —è–≤–ª—è–µ—Ç—Å—è –°–¢–†–û–ì–û p_k-–≥–ª–∞–¥–∫–∏–º (–¥–µ–ª–∏—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ 2, 3, 5)")
    print("   –ß–∏—Å–ª–∞ 1 –∏ -1 –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç!")
    print("-" * 50)
    
    attempts = 0
    max_attempts = t * 100
    rejected_count = 0
    
    while len(matrix) < t and attempts < max_attempts:
        attempts += 1
        
        # 2–∞: a_i - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å ‚àön + 1
        a = current_a
        current_a += 1
        
        # 2–±: b_i = a_i^2 mod n
        b = (a * a) % n
        
        # 2–≤: –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ b_i —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–¥–∫–∏–º (–¥–µ–ª–∏—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ 2, 3, 5)
        result, extra_factors = factor_smooth_number_strict(b, factor_base)
        
        if result is not None:
            factors = result
            
            print(f"\n‚úÖ –ü–∞—Ä–∞ #{len(matrix) + 1} –ü–†–ò–ù–Ø–¢–ê:")
            print(f"  a_{len(matrix)} = {a} (‚åä‚àö{n}‚åã + {a - start_a})")
            print(f"  b_{len(matrix)} = {a}¬≤ mod {n} = {a*a} mod {n} = {b}")
            
            print(f"  –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ: {b} = {print_factorization(b, factors, factor_base)}")
            print(f"  –°–¢–†–û–ì–û p_k-–≥–ª–∞–¥–∫–æ–µ: –î–ê ‚úì (–¥–µ–ª–∏—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ 2, 3, 5)")
            print(f"  |b_i| = {abs(b)}")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –º–æ–¥—É–ª—é 2
            factors_mod2 = [f % 2 for f in factors]
            matrix.append(factors_mod2)
            a_values.append(a)
            b_values.append(b)
        else:
            rejected_count += 1
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"\n‚ùå –ü–∞—Ä–∞ –û–¢–ö–õ–û–ù–ï–ù–ê (–ø–æ–ø—ã—Ç–∫–∞ #{attempts}):")
            print(f"  a = {a} (‚åä‚àö{n}‚åã + {a - start_a})")
            print(f"  b = {a}¬≤ mod {n} = {a*a} mod {n} = {b}")
            if b == 0:
                print(f"  b = 0 (–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)")
            elif abs(b) == 1:
                print(f"  b = {b} (—á–∏—Å–ª–∞ 1 –∏ -1 –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç!)")
            else:
                print(f"  b –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏: {extra_factors}")
                print(f"  –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ b: ", end="")
                temp = abs(b)
                factors_full = []
                d = 2
                while temp > 1:
                    if temp % d == 0:
                        count = 0
                        while temp % d == 0:
                            count += 1
                            temp //= d
                        factors_full.append(f"{d}^{count}")
                    else:
                        d += 1
                print(" √ó ".join(factors_full))
    
    print(f"\nüìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
    print(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –ø–∞—Ä: {len(matrix)}")
    print(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–∞—Ä: {rejected_count}")
    print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {attempts}")
    print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(matrix)}/{attempts} = {len(matrix)/attempts*100:.1f}%")
    print(f"üéØ –î–∏–∞–ø–∞–∑–æ–Ω a_i: –æ—Ç {start_a} –¥–æ {current_a - 1}")
    return matrix, a_values, b_values

def print_matrix_system_small(matrix: List[List[int]], factor_base: List[int]):
    """–í—ã–≤–æ–¥–∏—Ç –º–∞—Ç—Ä–∏—Ü—É –∏ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–π –±–∞–∑—ã"""
    print(f"\n--- –®–ê–ì 3: –ú–∞—Ç—Ä–∏—Ü–∞ V —Ä–∞–∑–º–µ—Ä–∞ {len(matrix)}√ó{len(factor_base)} ---")
    print("–ú–∞—Ç—Ä–∏—Ü–∞ V (–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –º–æ–¥—É–ª—é 2):")
    print("   " + " ".join(f" {p} " for p in factor_base))
    for i, row in enumerate(matrix):
        print(f"v{i}: " + " ".join(f" {val} " for val in row))
    
    print(f"\n–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: {factor_base}")
    print(f"–í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {len(factor_base)}")
    
    print(f"\n–í–µ–∫—Ç–æ—Ä –±—É–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö c = (c‚ÇÅ, c‚ÇÇ, ..., c_{len(matrix)})")
    print("–≥–¥–µ c_i ‚àà {0, 1}")
    
    print(f"\n–°–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π cV = O (–ø–æ –º–æ–¥—É–ª—é 2):")
    equations_count = 0
    for j in range(len(factor_base)):
        equation = []
        for i in range(len(matrix)):
            if matrix[i][j] == 1:
                equation.append(f"c{i}")
        if equation:
            print(f"  –£—Ä–∞–≤–Ω–µ–Ω–∏–µ {j+1} (—Ñ–∞–∫—Ç–æ—Ä {factor_base[j]}): { ' ‚äï '.join(equation) } = 0")
            equations_count += 1
    
    print(f"\nüìê –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:")
    print(f"  –£—Ä–∞–≤–Ω–µ–Ω–∏–π: {equations_count}")
    print(f"  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(matrix)}")
    print(f"  –°—Ç–µ–ø–µ–Ω—å —Å–≤–æ–±–æ–¥—ã: {len(matrix) - equations_count}")
    return equations_count

def solve_mod2_system_small(matrix: List[List[int]]) -> List[List[int]]:
    """
    –†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–æ –º–æ–¥—É–ª—é 2 –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    """
    if not matrix:
        return []
    
    m = len(matrix)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    n = len(matrix[0])  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    
    print(f"\n--- –†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã {m}√ó{n} –ø–æ –º–æ–¥—É–ª—é 2 ---")
    print(f"–ú–∞–ª–µ–Ω—å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞: {m} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, {n} —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
    
    # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    A = [[matrix[j][i] for j in range(m)] for i in range(n)]
    
    print("–ú–∞—Ç—Ä–∏—Ü–∞ —Å–∏—Å—Ç–µ–º—ã (—Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è):")
    for i in range(n):
        print(f"  –£—Ä-–Ω–∏–µ {i+1} (—Ñ–∞–∫—Ç–æ—Ä {[2, 3, 5][i]}): {A[i]}")
    
    # –ü—Ä—è–º–æ–π —Ö–æ–¥ –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞
    print("\n--- –ü—Ä—è–º–æ–π —Ö–æ–¥ –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞ ---")
    row = 0
    col = 0
    pivot_rows = []
    
    while row < n and col < m:
        # –ò—â–µ–º –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        pivot_row = -1
        for r in range(row, n):
            if A[r][col] == 1:
                pivot_row = r
                break
        
        if pivot_row == -1:
            print(f"  –°—Ç–æ–ª–±–µ—Ü {col}: –Ω–µ—Ç –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
            col += 1
            continue
        
        print(f"  –°—Ç–æ–ª–±–µ—Ü {col}: –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä–æ–∫–µ {pivot_row}")
        
        # –ú–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—Ç–∞–º–∏
        if pivot_row != row:
            A[row], A[pivot_row] = A[pivot_row], A[row]
            print(f"    –ü–æ–º–µ–Ω—è–ª–∏ —Å—Ç—Ä–æ–∫–∏ {row} –∏ {pivot_row}")
        
        # –û–±–Ω—É–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∏–∂–µ
        for r in range(row + 1, n):
            if A[r][col] == 1:
                for j in range(col, m):
                    A[r][j] ^= A[row][j]
                print(f"    –û–±–Ω—É–ª–∏–ª–∏ —Å—Ç—Ä–æ–∫—É {r} –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–æ–∫—É {row}")
        
        pivot_rows.append(row)
        row += 1
        col += 1
    
    print(f"\n–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–≥–æ —Ö–æ–¥–∞:")
    for i in range(n):
        print(f"  {A[i]}")
    print(f"–°—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏: {pivot_rows}")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—à–µ–Ω–∏—è
    solutions = []
    
    # –ë–∞–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    basic_vars = []
    for r in pivot_rows:
        for c in range(m):
            if A[r][c] == 1:
                basic_vars.append(c)
                break
    
    free_vars = [j for j in range(m) if j not in basic_vars]
    
    print(f"–ë–∞–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å—Ç–æ–ª–±—Ü—ã): {basic_vars}")
    print(f"–°–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å—Ç–æ–ª–±—Ü—ã): {free_vars}")
    
    if not free_vars:
        print("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        return solutions
    
    print(f"\n--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π ---")
    print(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(free_vars)}")
    
    # –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    for free_var in free_vars:
        solution = [0] * m
        solution[free_var] = 1
        
        print(f"\nüîç –†–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π c{free_var} = 1:")
        
        # –û–±—Ä–∞—Ç–Ω—ã–π —Ö–æ–¥
        for i in range(len(pivot_rows) - 1, -1, -1):
            r = pivot_rows[i]
            pivot_col = -1
            for c in range(m):
                if A[r][c] == 1:
                    pivot_col = c
                    break
            
            if pivot_col == -1:
                continue
            
            sum_val = 0
            for c in range(pivot_col + 1, m):
                sum_val ^= A[r][c] & solution[c]
            solution[pivot_col] = sum_val
            print(f"  c{pivot_col} = {sum_val}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
        valid = True
        for r in range(n):
            if r not in pivot_rows:
                continue
            sum_val = 0
            for c in range(m):
                sum_val ^= A[r][c] & solution[c]
            if sum_val != 0:
                valid = False
                break
        
        if valid:
            print(f"  ‚úÖ –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {solution}")
            solutions.append(solution)
        else:
            print(f"  ‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: {solution}")
    
    print(f"\nüéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(solutions)}")
    return solutions

def dixon_algorithm_strict(n: int) -> int:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –î–∏–∫—Å–æ–Ω–∞ —Å–æ –°–¢–†–û–ì–û–ô —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π [2, 3, 5]
    """
    print("=== –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –î–ò–ö–°–û–ù–ê ===")
    print("=== –°–û –°–¢–†–û–ì–û–ô –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–û–ô [2, 3, 5] ===")
    print(f"–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–∞: {n}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ n –Ω–µ—á—ë—Ç–Ω–æ–µ –∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ
    if n % 2 == 0:
        return 2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ n –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–µ–ø–µ–Ω—å—é
    for b in range(2, int(math.log2(n)) + 2):
        a = round(n ** (1/b))
        if a ** b == n:
            return a
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ª–µ–Ω—å–∫—É—é —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
    k = 3  # –≤—Å–µ–≥–æ 3 –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–ª–∞
    t = k + 1  # –Ω—É–∂–Ω–æ 4 –ø–∞—Ä—ã
    
    while True:
        print(f"\n{'='*60}")
        print(f"=== –ü–û–ü–´–¢–ö–ê –° –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–û–ô [2, 3, 5], t={t} ===")
        print(f"{'='*60}")
        
        # 1. –í—ã–±–∏—Ä–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        print(f"\n--- –®–ê–ì 1: –í—ã–±–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã ---")
        S = build_small_factor_base()
        print(f"–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ S: {S}")
        print(f"p_k = {S[-1]}")
        print(f"‚åä‚àö{n}‚åã = {math.isqrt(n)}")
        print("–°–¢–†–û–ì–û–ï —É—Å–ª–æ–≤–∏–µ: b_i –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ 2, 3, 5")
        print("–ß–∏—Å–ª–∞ 1 –∏ -1 –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç!")
        
        # 2. –°—Ç—Ä–æ–∏–º t –ø–∞—Ä —á–∏—Å–µ–ª (a_i, b_i)
        V, a_list, b_list = generate_smooth_pairs_dixon_strict(n, S, t)
        
        if len(V) < t:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {t} –≥–ª–∞–¥–∫–∏—Ö —á–∏—Å–µ–ª. –ù–∞–π–¥–µ–Ω–æ: {len(V)}")
            t += 1
            if t > 8:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ t
                print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º t –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
                t = min(t, 10)
            continue
        
        # 3. –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏ —Ä–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        equations_count = print_matrix_system_small(V, S)
        
        solutions = solve_mod2_system_small(V)
        
        if not solutions:
            print("‚ùå –ù–µ—Ç –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã")
            t += 1
            continue
        
        # 4-6. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –∏—â–µ–º –¥–µ–ª–∏—Ç–µ–ª—å
        print(f"\n{'='*60}")
        print(f"=== –®–ê–ì 4-6: –ü–æ–∏—Å–∫ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–≥–æ –¥–µ–ª–∏—Ç–µ–ª—è ===")
        print(f"{'='*60}")
        
        for solution_idx, c in enumerate(solutions):
            print(f"\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è {solution_idx + 1} ---")
            print(f"–í–µ–∫—Ç–æ—Ä c = {c}")
            
            # I = {i : c_i = 1}
            I = [i for i, val in enumerate(c) if val == 1]
            
            if not I:
                print("–ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ I - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            print(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ I = {I}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º x = –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ a_i –ø–æ i –∏–∑ I mod n
            print(f"\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ x = ‚àè a_i mod n –¥–ª—è i ‚àà I:")
            x = 1
            for i in I:
                print(f"  a_{i} = {a_list[i]}")
                x = (x * a_list[i]) % n
            print(f"  x = {x} mod {n}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ b_i –ø–æ i –∏–∑ I
            print(f"\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ ‚àè b_i –¥–ª—è i ‚àà I:")
            product_b = 1
            for i in I:
                print(f"  b_{i} = {b_list[i]}")
                product_b *= b_list[i]
            print(f"  ‚àè b_i = {product_b}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - –ø–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ ‚àè b_i - –ø–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç:")
            y = math.isqrt(product_b)
            print(f"  ‚àö({product_b}) = {y}")
            print(f"  {y}¬≤ = {y*y}")
            print(f"  {y*y} == {product_b} ? {y*y == product_b}")
            
            if y * y != product_b:
                print("‚ùå ‚àè b_i –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è x ‚â† ¬±y (mod n):")
            x_mod = x % n
            y_mod = y % n
            neg_y_mod = (n - y_mod) % n
            
            print(f"  x mod n = {x_mod}")
            print(f"  y mod n = {y_mod}")
            print(f"  -y mod n = {neg_y_mod}")
            print(f"  x ‚â° y (mod n)? {x_mod == y_mod}")
            print(f"  x ‚â° -y (mod n)? {x_mod == neg_y_mod}")
            
            if x_mod != y_mod and x_mod != neg_y_mod:
                print(f"\n‚úÖ –£–°–ü–ï–•: x ‚â† ¬±y (mod n)")
                print(f"\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ù–û–î:")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±–∞ –ù–û–î
                d1 = math.gcd(x + y, n)
                d2 = math.gcd(abs(x - y), n)
                
                print(f"  –ù–û–î(x + y, n) = –ù–û–î({x + y}, {n}) = {d1}")
                print(f"  –ù–û–î(x - y, n) = –ù–û–î({abs(x - y)}, {n}) = {d2}")
                
                if d1 != 1 and d1 != n:
                    print(f"\nüéâ –ù–ê–ô–î–ï–ù –ù–ï–¢–†–ò–í–ò–ê–õ–¨–ù–´–ô –î–ï–õ–ò–¢–ï–õ–¨: {d1}")
                    return d1
                elif d2 != 1 and d2 != n:
                    print(f"\nüéâ –ù–ê–ô–î–ï–ù –ù–ï–¢–†–ò–í–ò–ê–õ–¨–ù–´–ô –î–ï–õ–ò–¢–ï–õ–¨: {d2}")
                    return d2
                else:
                    print("‚ùå –û–±–∞ –ù–û–î —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")
            else:
                print("‚ùå x ‚â° ¬±y (mod n) - —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–±—Ä–∞–ª–∏ –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\n‚ùå –í—Å–µ {len(solutions)} —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º t —Å {t} –¥–æ {t + 1}")
        t += 1
        
        if t > 12:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ t
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–ª–∏—Ç–µ–ª—å –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    print("=== –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –î–ò–ö–°–û–ù–ê ===")
    print("=== –°–û –°–¢–†–û–ì–û–ô –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–û–ô [2, 3, 5] ===")
    print("–û–°–û–ë–´–ï –£–°–õ–û–í–ò–Ø:")
    print("- a_i –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞—è —Å ‚åä‚àön‚åã + 1")
    print("- –§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –≤—Å–µ–≥–æ –∏–∑ 3 –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª: [2, 3, 5]")
    print("- b_i –¥–æ–ª–∂–Ω—ã –¥–µ–ª–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ 2, 3, 5")
    print("- –ß–∏—Å–ª–∞ 1 –∏ -1 –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç!")
    print("- –ï—Å–ª–∏ b_i –∏–º–µ–µ—Ç –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ - –ø–∞—Ä–∞ –û–¢–ë–†–ê–°–´–í–ê–ï–¢–°–Ø")
    
    try:
        # –í–≤–æ–¥ —á–∏—Å–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        n = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–µ—á—ë—Ç–Ω–æ–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ —á–∏—Å–ª–æ n: "))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if n % 2 == 0:
            print("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—á—ë—Ç–Ω—ã–º!")
            return
        
        if n < 2:
            print("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É
        if is_prime(n):
            print("–ß–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ!")
            return
        
        print(f"\n–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–∏—Å–ª–∞ {n}")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –î–∏–∫—Å–æ–Ω–∞ —Å–æ —Å—Ç—Ä–æ–≥–æ–π –±–∞–∑–æ–π
        divisor = dixon_algorithm_strict(n)
        
        print(f"\n{'='*60}")
        print(f"=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
        print(f"{'='*60}")
        print(f"–ù–∞–π–¥–µ–Ω –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–∏—Ç–µ–ª—å: {divisor}")
        print(f"{n} = {divisor} √ó {n // divisor}")
        print(f"–ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–æ –°–¢–†–û–ì–û–ô —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –∏–∑ 3 –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª!")
        print(f"{'='*60}")
        
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()