import math
import random
from typing import List, Tuple, Optional

def is_prime(n: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º"""
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def legendre_symbol(a: int, p: int) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ (a/p)
    """
    if p == 2:
        return 1 if a % 2 == 1 else 0
    
    result = pow(a, (p - 1) // 2, p)
    if result == p - 1:
        return -1
    return result

def build_factor_base_with_negative(n: int, k: int) -> List[int]:
    """
    –°—Ç—Ä–æ–∏—Ç —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É —Å -1 –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏ —Å (n/p) = 1
    """
    print(f"\n--- –ü–û–î–†–û–ë–ù–û–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ ---")
    print(f"–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å: -1, 2 –∏ {k-2} –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª —Å (n/p) = 1")
    
    factor_base = [-1, 2]  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º -1 –∏ 2
    print(f"\n–î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    print(f"  p‚ÇÅ = -1 (–¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª)")
    print(f"  p‚ÇÇ = 2")
    print(f"  –¢–µ–∫—É—â–∞—è —Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: {factor_base}")
    
    p = 3
    tested_primes = 0
    included_primes = 2  # –£–∂–µ –≤–∫–ª—é—á–∏–ª–∏ -1 –∏ 2
    
    while included_primes < k and tested_primes < 100:
        if is_prime(p):
            tested_primes += 1
            legendre = legendre_symbol(n, p)
            
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ p = {p}:")
            print(f"  –°–∏–º–≤–æ–ª –õ–µ–∂–∞–Ω–¥—Ä–∞ ({n}/{p}) = {legendre}")
            
            if legendre == 1:
                factor_base.append(p)
                included_primes += 1
                print(f"  ‚úì {n} - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –≤—ã—á–µ—Ç –ø–æ –º–æ–¥—É–ª—é {p}")
                print(f"  ‚úì –î–æ–±–∞–≤–ª—è–µ–º p{included_primes} = {p} –≤ —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É")
                print(f"  –¢–µ–∫—É—â–∞—è —Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: {factor_base}")
            elif legendre == -1:
                print(f"  ‚úó {n} - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –Ω–µ–≤—ã—á–µ—Ç –ø–æ –º–æ–¥—É–ª—é {p}")
                print(f"  ‚úó –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {p}")
            else:
                print(f"  ! {n} ‚â° 0 (mod {p}) - {p} —è–≤–ª—è–µ—Ç—Å—è –¥–µ–ª–∏—Ç–µ–ª–µ–º {n}!")
                return [p]
            
        p += 2
    
    print(f"\n--- –ò–¢–û–ì –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ ---")
    print(f"–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞: {factor_base}")
    print(f"p‚ÇÅ = -1, p‚ÇÇ = 2, " + ", ".join([f"p{i+1} = {factor_base[i]}" for i in range(2, len(factor_base))]))
    return factor_base

def factor_smooth_number_with_negative(b: int, factor_base: List[int]) -> Optional[Tuple[List[int], List[int]]]:
    """
    –§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–∞ b –ø–æ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ —Å —É—á–µ—Ç–æ–º -1
    """
    if b == 0:
        return None, [0]
    
    factors = [0] * len(factor_base)
    temp = abs(b)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã -1)
    if b < 0:
        factors[0] = 1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º -1
    
    # –§–∞–∫—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–∞–º
    for i in range(1, len(factor_base)):
        p = factor_base[i]
        count = 0
        while temp % p == 0:
            count += 1
            temp //= p
        factors[i] = count
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–∞–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –ø–æ –±–∞–∑–µ
    if temp != 1:
        extra_factors = []
        temp_check = temp
        d = 2
        while temp_check > 1:
            if temp_check % d == 0:
                if is_prime(d) and d not in factor_base:
                    extra_factors.append(d)
                temp_check //= d
            else:
                d += 1
        return None, extra_factors
    
    return factors, []

def print_factorization_with_negative(b: int, factors: List[int], factor_base: List[int]) -> str:
    """–í—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å —É—á–µ—Ç–æ–º -1"""
    terms = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
    if factors[0] == 1:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω -1
        terms.append("-1")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
    for i in range(1, len(factor_base)):
        exp = factors[i]
        p = factor_base[i]
        if exp > 0:
            terms.append(f"{p}^{exp}")
    
    if not terms:
        return "1"
    
    return " √ó ".join(terms)

def print_vector_formation(x: int, a: int, b: int, factors: List[int], factor_base: List[int], vector_index: int):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ x"""
    print(f"\nüìä –ü–û–î–†–û–ë–ù–û–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –í–ï–ö–¢–û–†–ê c{vector_index} –¥–ª—è x = {x}:")
    print(f"  a = x + m = {x} + {a - x} = {a}")
    print(f"  b = a¬≤ - n = {a}¬≤ - {a*a - b} = {b}")
    print(f"  –§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {b} = {print_factorization_with_negative(b, factors, factor_base)}")
    
    print(f"  –í–µ–∫—Ç–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {factors}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ–∫—Ç–æ—Ä –ø–æ –º–æ–¥—É–ª—é 2
    factors_mod2 = [f % 2 for f in factors]
    print(f"  –í–µ–∫—Ç–æ—Ä –ø–æ –º–æ–¥—É–ª—é 2: {factors_mod2}")
    
    print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ:")
    for i, fb in enumerate(factor_base):
        print(f"    p{i+1} = {fb:2} ‚Üí –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: {factors[i]} ‚Üí mod 2: {factors_mod2[i]}")
    
    return factors_mod2

def generate_smooth_pairs_quadratic_sieve_with_negative(n: int, factor_base: List[int], t: int) -> Tuple[List[List[int]], List[int], List[int]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç t –ø–∞—Ä —á–∏—Å–µ–ª (a_i, b_i) —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π
    """
    matrix = []
    a_values = []
    b_values = []
    x_values_used = []
    
    m = math.isqrt(n)
    print(f"\n--- –®–ê–ì 2: –ü–û–°–¢–†–û–ï–ù–ò–ï {t} –ü–ê–† (a_i, b_i) ---")
    print(f"m = [‚àö{n}] = {m}")
    print("–ò—â–µ–º x —Ç–∞–∫–∏–µ, —á—Ç–æ b = (x + m)¬≤ - n —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–¥–∫–∏–º")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º x = 0, ¬±1, ¬±2, ¬±3, ...")
    print("-" * 60)
    
    x = 0
    max_x = 100
    found_pairs = 0
    checked_x = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö x
    
    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å x = 0:")
    
    while found_pairs < t and abs(x) <= max_x:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ x
        if x not in checked_x:
            checked_x.add(x)
            
            # a_i = x + m
            a = x + m
            
            # b_i = (x + m)¬≤ - n = a¬≤ - n
            b = a * a - n
            
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º x = {x}:")
            print(f"  a = x + m = {x} + {m} = {a}")
            print(f"  b = a¬≤ - n = {a}¬≤ - {n} = {a*a} - {n} = {b}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ b_i —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–¥–∫–∏–º
            result, extra_factors = factor_smooth_number_with_negative(b, factor_base)
            
            if result is not None:
                factors = result
                found_pairs += 1
                
                print(f"  ‚úÖ –ü–∞—Ä–∞ #{found_pairs} –ü–†–ò–ù–Ø–¢–ê!")
                
                # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞
                factors_mod2 = print_vector_formation(x, a, b, factors, factor_base, found_pairs)
                
                print(f"  –°–¢–†–û–ì–û p_k-–≥–ª–∞–¥–∫–æ–µ: –î–ê ‚úì")
                
                matrix.append(factors_mod2)
                a_values.append(a)
                b_values.append(b)
                x_values_used.append(x)
            else:
                if b == 0:
                    print(f"  ‚ùå b = 0 (–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)")
                else:
                    print(f"  ‚ùå b –∏–º–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏: {extra_factors}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É x –≤ –ø–æ—Ä—è–¥–∫–µ: 0, 1, -1, 2, -2, ...
        if x >= 0:
            x = -x - 1
        else:
            x = -x
    
    print(f"\nüìä –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê:")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {found_pairs}")
    print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è x: {x_values_used}")
    
    return matrix, a_values, b_values

def print_matrix_system_with_negative(matrix: List[List[int]], factor_base: List[int]):
    """–í—ã–≤–æ–¥–∏—Ç –º–∞—Ç—Ä–∏—Ü—É –∏ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π"""
    print(f"\n--- –®–ê–ì 3: –ú–ê–¢–†–ò–ß–ù–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï ---")
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞ V —Ä–∞–∑–º–µ—Ä–∞ {len(matrix)}√ó{len(factor_base)}")
    print("–°—Ç–æ–ª–±—Ü—ã: " + " ".join([f"p{i+1}" for i in range(len(factor_base))]))
    print("–§–∞–∫—Ç–æ—Ä—ã: " + " ".join([f"{fb:2}" for fb in factor_base]))
    
    print(f"\n–ú–∞—Ç—Ä–∏—Ü–∞ V (–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –º–æ–¥—É–ª—é 2):")
    for i, row in enumerate(matrix):
        print(f"c{i+1}: " + " ".join([f" {val:2}" for val in row]))
    
    print(f"\n–°–ò–°–¢–ï–ú–ê –£–†–ê–í–ù–ï–ù–ò–ô cV ‚â° 0 (mod 2):")
    equations_count = 0
    
    for j in range(len(factor_base)):
        equation_terms = []
        for i in range(len(matrix)):
            if matrix[i][j] == 1:
                equation_terms.append(f"c{i+1}")
        
        if equation_terms:
            equations_count += 1
            factor_name = f"p{j+1} ({factor_base[j]})"
            print(f"  –î–ª—è {factor_name}: { ' + '.join(equation_terms) } ‚â° 0")
    
    print(f"\nüìê –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´:")
    print(f"  –£—Ä–∞–≤–Ω–µ–Ω–∏–π: {equations_count}, –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(matrix)}")
    print(f"  –°—Ç–µ–ø–µ–Ω—å —Å–≤–æ–±–æ–¥—ã: {len(matrix) - equations_count}")
    
    return equations_count

def solve_mod2_system_corrected(matrix: List[List[int]]) -> List[List[int]]:
    """
    –†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–æ –º–æ–¥—É–ª—é 2 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    """
    if not matrix:
        return []
    
    m = len(matrix)  # —Å—Ç—Ä–æ–∫–∏
    n = len(matrix[0])  # —Å—Ç–æ–ª–±—Ü—ã
    
    print(f"\n--- –†–ï–®–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ {m}√ó{n} –ü–û –ú–û–î–£–õ–Æ 2 ---")
    
    # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É
    A = [[matrix[j][i] for j in range(m)] for i in range(n)]
    
    print("–ú–∞—Ç—Ä–∏—Ü–∞ —Å–∏—Å—Ç–µ–º—ã (—Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è):")
    for i in range(n):
        print(f"  {A[i]}")
    
    # –ü—Ä—è–º–æ–π —Ö–æ–¥ –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞
    row = 0
    col = 0
    pivot_rows = []
    
    while row < n and col < m:
        # –ò—â–µ–º –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        pivot_row = -1
        for r in range(row, n):
            if A[r][col] == 1:
                pivot_row = r
                break
        
        if pivot_row == -1:
            col += 1
            continue
        
        # –ú–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—Ç–∞–º–∏
        if pivot_row != row:
            A[row], A[pivot_row] = A[pivot_row], A[row]
        
        # –û–±–Ω—É–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∏–∂–µ
        for r in range(row + 1, n):
            if A[r][col] == 1:
                for j in range(col, m):
                    A[r][j] ^= A[row][j]
        
        pivot_rows.append(row)
        row += 1
        col += 1
    
    print(f"–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:")
    for i in range(n):
        print(f"  {A[i]}")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—à–µ–Ω–∏—è
    solutions = []
    
    # –ë–∞–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    basic_vars = []
    for r in pivot_rows:
        for c in range(m):
            if A[r][c] == 1:
                basic_vars.append(c)
                break
    
    free_vars = [j for j in range(m) if j not in basic_vars]
    
    print(f"–ë–∞–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {basic_vars}")
    print(f"–°–≤–æ–±–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {free_vars}")
    
    if not free_vars:
        return solutions
    
    print(f"\n--- –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–ô ---")
    
    # –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    for free_var in free_vars:
        solution = [0] * m
        solution[free_var] = 1
        
        print(f"\n–†–µ—à–µ–Ω–∏–µ –¥–ª—è c{free_var + 1} = 1:")
        
        # –û–±—Ä–∞—Ç–Ω—ã–π —Ö–æ–¥
        for i in range(len(pivot_rows) - 1, -1, -1):
            r = pivot_rows[i]
            pivot_col = -1
            for c in range(m):
                if A[r][c] == 1:
                    pivot_col = c
                    break
            
            if pivot_col == -1:
                continue
            
            sum_val = 0
            for c in range(pivot_col + 1, m):
                sum_val ^= A[r][c] & solution[c]
            solution[pivot_col] = sum_val
            print(f"  c{pivot_col + 1} = {sum_val}")
        
        print(f"  –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {[f'c{i+1}={val}' for i, val in enumerate(solution)]}")
        solutions.append(solution)
    
    print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(solutions)}")
    return solutions

def check_solution_and_find_divisor(n: int, solution: List[int], a_list: List[int], b_list: List[int], factor_base: List[int]):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏ –∏—â–µ—Ç –¥–µ–ª–∏—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    """
    I = [i for i, val in enumerate(solution) if val == 1]
    
    print(f"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ I = {[i+1 for i in I]} (–∏–Ω–¥–µ–∫—Å—ã c·µ¢)")
    
    # –í—ã—á–∏—Å–ª—è–µ–º x = –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ a_i –ø–æ i –∏–∑ I mod n
    x = 1
    for i in I:
        x = (x * a_list[i]) % n
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ b_i –ø–æ i –∏–∑ I
    product_b = 1
    for i in I:
        product_b *= b_list[i]
    
    print(f"x = ‚àè a_i mod n = {x} mod {n}")
    print(f"‚àè b_i = {product_b}")
    
    # –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –±–µ—Ä–µ–º –º–æ–¥—É–ª—å
    product_b_abs = abs(product_b)
    sign = -1 if product_b < 0 else 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ - –ø–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
    y_abs = math.isqrt(product_b_abs)
    is_square = (y_abs * y_abs == product_b_abs)
    
    print(f"|‚àè b_i| = {product_b_abs}")
    print(f"‚àö(|‚àè b_i|) = {y_abs}")
    print(f"{y_abs}¬≤ = {y_abs * y_abs}")
    print(f"–ü–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç? {is_square}")
    
    if not is_square:
        print("‚ùå ‚àè b_i –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º")
        return None
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º y —Å —É—á–µ—Ç–æ–º –∑–Ω–∞–∫–∞
    y = y_abs if sign == 1 else y_abs  # y –≤—Å–µ–≥–¥–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –∑–Ω–∞–∫ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
    
    print(f"y = {y}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ x ‚â† ¬±y (mod n)
    x_mod = x % n
    y_mod = y % n
    neg_y_mod = (n - y_mod) % n
    
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è x ‚â† ¬±y (mod n):")
    print(f"  x mod n = {x_mod}")
    print(f"  y mod n = {y_mod}")
    print(f"  -y mod n = {neg_y_mod}")
    print(f"  x ‚â° y (mod n)? {x_mod == y_mod}")
    print(f"  x ‚â° -y (mod n)? {x_mod == neg_y_mod}")
    
    if x_mod != y_mod and x_mod != neg_y_mod:
        print(f"‚úÖ –£–°–ü–ï–•: x ‚â† ¬±y (mod n)")
        print(f"\nüéØ –í–´–ß–ò–°–õ–ï–ù–ò–ï –ù–û–î:")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±–∞ –ù–û–î
        d1 = math.gcd(x + y, n)
        d2 = math.gcd(abs(x - y), n)
        
        print(f"  –ù–û–î(x + y, n) = –ù–û–î({x + y}, {n}) = {d1}")
        print(f"  –ù–û–î(x - y, n) = –ù–û–î({abs(x - y)}, {n}) = {d2}")
        
        if d1 != 1 and d1 != n:
            return d1
        elif d2 != 1 and d2 != n:
            return d2
        else:
            print("‚ùå –û–±–∞ –ù–û–î —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ")
    else:
        print("‚ùå x ‚â° ¬±y (mod n) - —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
    
    return None

def quadratic_sieve_with_negative_base(n: int, k: int) -> int:
    """
    –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ —Ä–µ—à–µ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π [-1, 2, ...]
    """
    print("=== –ö–í–ê–î–†–ê–¢–ò–ß–ù–û–ï –†–ï–®–ï–¢–û ===")
    print(f"–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–∞: {n}")
    print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: k = {k}")
    print(f"–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å: -1, 2 –∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ —Å (n/p) = 1")
    
    if n % 2 == 0:
        return 2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ n –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–µ–ø–µ–Ω—å—é
    for b in range(2, int(math.log2(n)) + 2):
        a = round(n ** (1/b))
        if a ** b == n:
            return a
    
    t = k + 1
    
    while True:
        print(f"\n{'='*70}")
        print(f"=== –ü–û–ü–´–¢–ö–ê –° –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–û–ô –ò–ó {k} –≠–õ–ï–ú–ï–ù–¢–û–í ===")
        print(f"–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: t = {t}")
        print(f"{'='*70}")
        
        # 1. –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        print(f"\n--- –®–ê–ì 1: –í–´–ë–û–† –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ ---")
        S = build_factor_base_with_negative(n, k)
        
        if len(S) == 1 and S[0] != -1:
            return S[0]
        
        # 2. –°—Ç—Ä–æ–∏–º t –ø–∞—Ä —á–∏—Å–µ–ª (a_i, b_i)
        V, a_list, b_list = generate_smooth_pairs_quadratic_sieve_with_negative(n, S, t)
        
        if len(V) < t:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {t} –≥–ª–∞–¥–∫–∏—Ö —á–∏—Å–µ–ª. –ù–∞–π–¥–µ–Ω–æ: {len(V)}")
            t += 1
            continue
        
        # 3. –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏ —Ä–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        equations_count = print_matrix_system_with_negative(V, S)
        
        solutions = solve_mod2_system_corrected(V)
        
        if not solutions:
            print("‚ùå –ù–µ—Ç –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã")
            t += 1
            continue
        
        # 4-6. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –∏—â–µ–º –¥–µ–ª–∏—Ç–µ–ª—å
        print(f"\n{'='*70}")
        print(f"=== –ü–û–ò–°–ö –ù–ï–¢–†–ò–í–ò–ê–õ–¨–ù–û–ì–û –î–ï–õ–ò–¢–ï–õ–Ø ===")
        
        for solution_idx, c in enumerate(solutions):
            print(f"\n--- –ü–†–û–í–ï–†–ö–ê –†–ï–®–ï–ù–ò–Ø {solution_idx + 1} ---")
            print(f"–í–µ–∫—Ç–æ—Ä c = {[f'c{i+1}={val}' for i, val in enumerate(c)]}")
            
            divisor = check_solution_and_find_divisor(n, c, a_list, b_list, S)
            if divisor is not None:
                return divisor
        
        print(f"‚ùå –í—Å–µ {len(solutions)} —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        t += 1
        
        if t > k + 8:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è n={n} —Å k={k}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ö–í–ê–î–†–ê–¢–ò–ß–ù–û–ï –†–ï–®–ï–¢–û ===")
    print("–° –ü–†–ê–í–ò–õ–¨–ù–û–ô –§–ê–ö–¢–û–†–ù–û–ô –ë–ê–ó–û–ô [-1, 2, p‚ÇÉ, ...]")
    print("\n–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç:")
    print("  - -1 –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª b_i")
    print("  - 2 –∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ p, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö n - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π –≤—ã—á–µ—Ç mod p")
    print("  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: 3")
    
    try:
        n = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–µ—á—ë—Ç–Ω–æ–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ —á–∏—Å–ª–æ n: "))
        
        if n % 2 == 0:
            print("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—á—ë—Ç–Ω—ã–º!")
            return
        
        if n < 2:
            print("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!")
            return
        
        if is_prime(n):
            print("–ß–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ!")
            return
        
        k = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã k (–º–∏–Ω–∏–º—É–º 3): "))
        
        if k < 3:
            print("k –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3!")
            return
        
        print(f"\n–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–∏—Å–ª–∞ {n}")
        print(f"–° —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã k = {k}")
        print(f"–§–∞–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å: -1, 2 –∏ {k-2} –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª —Å (n/p) = 1")
        
        divisor = quadratic_sieve_with_negative_base(n, k)
        
        print(f"\n{'='*70}")
        print(f"=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
        print(f"–ù–∞–π–¥–µ–Ω –¥–µ–ª–∏—Ç–µ–ª—å: {divisor}")
        print(f"{n} = {divisor} √ó {n // divisor}")
        print(f"–ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"{'='*70}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()